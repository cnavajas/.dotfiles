const float speed = 0.2;
const float brightness = 0.5;

float circle(vec2 pos, vec2 center, float radius) {
    return length(pos - center) < radius ? 1.0 : 0.0;
}

float zen(vec2 pos) {
    float circle = circle(pos, vec2(0.8, 0.8), 0.15);
    float arc = 0.0;
    
    // Create curved line through circle
    vec2 arcPos = pos - vec2(0.8, 0.8);
    float angle = atan(arcPos.y, arcPos.x);
    float dist = length(arcPos);
    if (dist < 0.15 && dist > 0.13 && angle > -2.5 && angle < 0.5) {
        arc = 1.0;
    }
    
    return circle + arc;
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    float t = iTime;
    vec2 uv = fragCoord/iResolution.xy;
    vec2 pos = (uv * 2.0 - 1.0) * vec2(iResolution.x/iResolution.y, 1.0);
    
    float pattern = zen(pos);
    vec3 symbolColor = vec3(1.0) * pattern * (0.5 + 0.5 * sin(t));
    
    vec4 terminalColor = texture(iChannel0, uv);
    vec3 blendedColor = terminalColor.rgb + symbolColor * brightness;
    fragColor = vec4(blendedColor, terminalColor.a);
}
